import os
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiohttp import web

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")  # "@LenaMustest"
YOUR_TELEGRAM_ID = int(os.getenv("YOUR_TELEGRAM_ID"))

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫–∏
users_waiting_for_date = set()

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===

def get_calculate_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü–û–õ–£–ß–ò–¢–¨ –†–ê–°–ß–ï–¢", callback_data="get_calculation")]
    ])

def get_subscription_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")],
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
    ])

def get_admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ", callback_data="create_post")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="refresh_stats")]
    ])

# === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

@dp.message(Command("start"))
async def start_handler(message: Message):
    welcome_text = """
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:
    """
    await message.answer(welcome_text, reply_markup=get_calculate_keyboard())

@dp.callback_query(F.data == "get_calculation")
async def handle_get_calculation(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    try:
        chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            await ask_for_birth_date(callback)
        else:
            await callback.message.edit_text(
                "üôè **–ü–û–î–ü–ò–®–ò–¢–ï–°–¨ –ù–ê –ö–ê–ù–ê–õ, –ß–¢–û–ë–´ –ü–û–õ–£–ß–ò–¢–¨ –ë–ï–°–ü–õ–ê–¢–ù–´–ô –†–ê–°–ß–ï–¢**\n\n"
                f"–ö–∞–Ω–∞–ª: {CHANNEL_USERNAME}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=get_subscription_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "check_subscription")
async def handle_check_subscription(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    try:
        chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            await ask_for_birth_date(callback)
        else:
            await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def ask_for_birth_date(callback: CallbackQuery):
    user_id = callback.from_user.id
    users_waiting_for_date.add(user_id)
    
    instruction_text = """
üìÖ **–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!**

–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã –º–Ω–µ –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.

üìã **–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì**
–ù–∞–ø—Ä–∏–º–µ—Ä: 15.09.1985

‚ö†Ô∏è –†–∞—Å—á–µ—Ç –±—É–¥–µ—Ç —Ç–æ—á–Ω—ã–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è.
    """
    
    await callback.message.edit_text(instruction_text, reply_markup=None)
    await callback.answer("‚úÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")

@dp.message(F.text)
async def handle_birth_date(message: Message):
    user_id = message.from_user.id
    
    if user_id not in users_waiting_for_date:
        await start_handler(message)
        return
    
    try:
        birth_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        
        username = message.from_user.username
        user_info = f"@{username}" if username else f"ID: {user_id}"
        first_name = message.from_user.first_name or ""
        last_name = message.from_user.last_name or ""
        full_name = f"{first_name} {last_name}".strip()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–∞–º
        notification_text = f"""
üë§ **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –†–ê–°–ß–ï–¢!**

‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}
‚Ä¢ –ò–º—è: {full_name if full_name else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date.strftime('%d.%m.%Y')}
‚Ä¢ ID: {user_id}

üì© –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞!
        """
        
        await bot.send_message(YOUR_TELEGRAM_ID, notification_text)
        
        await message.answer(
            "‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!**\n\n"
            "–Ø –ø–æ–ª—É—á–∏–ª–∞ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã.\n\n"
            "–û–±—ã—á–Ω–æ —è –æ—Ç–≤–µ—á–∞—é –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n\n"
            "–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ï–ª–µ–Ω–∞ üí´"
        )
        
        users_waiting_for_date.discard(user_id)
        
    except ValueError:
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: **–î–î.–ú–ú.–ì–ì–ì–ì**\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.09.1985\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )

# === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø) ===

@dp.message(Command("admin"))
async def admin_panel(message: Message):
    """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id != YOUR_TELEGRAM_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    stats_text = f"""
üìä **–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º**

‚Ä¢ –ö–∞–Ω–∞–ª: {CHANNEL_USERNAME}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–∂–∏–¥–∞—é—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã: {len(users_waiting_for_date)}

–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?
    """
    
    await message.answer(stats_text, reply_markup=get_admin_keyboard())

@dp.callback_query(F.data == "create_post")
async def create_channel_post(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ —Å –∫–Ω–æ–ø–∫–æ–π"""
    if callback.from_user.id != YOUR_TELEGRAM_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    post_text = """
üåü **–ë–ï–°–ü–õ–ê–¢–ù–´–ô –†–ê–°–ß–ï–¢ –ü–û –ú–ê–¢–†–ò–¶–ï –°–£–î–¨–ë–´!**

üìä –£–∑–Ω–∞–π—Ç–µ –æ —Å–≤–æ–∏—Ö:
‚Ä¢ –°–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö –∏ —Ç–∞–ª–∞–Ω—Ç–∞—Ö
‚Ä¢ –ö–∞—Ä–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö
‚Ä¢ –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
‚Ä¢ –ó–æ–Ω–∞—Ö —Ä–æ—Å—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö

üéÅ –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ë–ï–°–ü–õ–ê–¢–ù–û!

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá
    """
    
    try:
        await bot.send_message(
            CHANNEL_USERNAME, 
            post_text, 
            reply_markup=get_calculate_keyboard()
        )
        await callback.answer("‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.callback_query(F.data == "refresh_stats")
async def refresh_stats(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if callback.from_user.id != YOUR_TELEGRAM_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    stats_text = f"""
üìä **–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

‚Ä¢ –ö–∞–Ω–∞–ª: {CHANNEL_USERNAME}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–∂–∏–¥–∞—é—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã: {len(users_waiting_for_date)}
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {datetime.now().strftime('%H:%M:%S')}
    """
    
    await callback.message.edit_text(stats_text, reply_markup=get_admin_keyboard())
    await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

# === HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
async def health_check(request):
    return web.Response(text="‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def start_bot():
    await dp.start_polling(bot)

if __name__ == "__main__":
    app = web.Application()
    app.router.add_get('/health', health_check)
    
    port = int(os.environ.get("PORT", 10000))
    
    async def main():
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç–∞
    async def run_all():
        await asyncio.gather(
            web._run_app(app, host='0.0.0.0', port=port),
            main()
        )
    
    asyncio.run(run_all())
