import os
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")  # "@LenaMustest"
YOUR_TELEGRAM_ID_STR = os.getenv("YOUR_TELEGRAM_ID")

if not all([BOT_TOKEN, CHANNEL_USERNAME, YOUR_TELEGRAM_ID_STR]):
    raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

try:
    YOUR_TELEGRAM_ID = int(YOUR_TELEGRAM_ID_STR)
except ValueError:
    raise ValueError("‚ùå YOUR_TELEGRAM_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
awaiting_birth_date = set()
awaiting_admin_post = set()

# === /start ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è ===
@dp.message(F.text == "/start")
async def start_handler(message: Message):
    user_id = message.from_user.id
    try:
        chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            awaiting_birth_date.add(user_id)
            await message.answer(
                "‚ú® –û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "<code>–¥–¥.–º–º.–≥–≥–≥–≥</code>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>15.08.1990</code>",
                parse_mode="HTML"
            )
        else:
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                    url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
                )]
            ])
            await message.answer(
                "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã!",
                reply_markup=markup
            )
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %s", e)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è ===
@dp.message(F.text)
async def handle_text(message: Message):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –∂–¥—ë–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
    if user_id in awaiting_birth_date:
        try:
            birth_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
            username = f"@{message.from_user.username}" if message.from_user.username else f"ID{user_id}"
            await bot.send_message(
                YOUR_TELEGRAM_ID,
                f"üÜï –ù–æ–≤—ã–π –ª–∏–¥!\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: <code>{birth_date.strftime('%d.%m.%Y')}</code>\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤—Ä—É—á–Ω—É—é.",
                parse_mode="HTML"
            )
            awaiting_birth_date.discard(user_id)
            await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°–∫–æ—Ä–æ —è —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞.")
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–¥–¥.–º–º.–≥–≥–≥–≥</code>", parse_mode="HTML")
        return

    # –ï—Å–ª–∏ –∂–¥—ë–º –ø–æ—Å—Ç –æ—Ç –∞–¥–º–∏–Ω–∞
    if user_id in awaiting_admin_post:
        post_text = message.text
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç", url=f"https://t.me/{bot._me.user.username}?start=matrix")]
        ])
        await bot.send_message(CHANNEL_USERNAME, post_text, reply_markup=markup)
        awaiting_admin_post.discard(user_id)
        await message.answer("‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!")
        return

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∂–¥—ë–º ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
    await start_handler(message)

# === /admin ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π ===
@dp.message(F.text == "/admin")
async def admin_handler(message: Message):
    if message.from_user.id != YOUR_TELEGRAM_ID:
        return
    awaiting_admin_post.add(message.from_user.id)
    await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞. –Ø –¥–æ–±–∞–≤–ª—é –∫–Ω–æ–ø–∫—É ¬´–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç¬ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

# === –§–∏–∫—Ç–∏–≤–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (–±–µ—Å–ø–ª–∞—Ç–Ω–æ!) ===
async def health_check(request):
    return web.Response(text="‚úÖ Bot is alive!")

async def start_bot():
    try:
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: %s", e)

async def create_app():
    app = web.Application()
    app.router.add_get("/", health_check)
    app.router.add_get("/health", health_check)
    return app

async def main():
    app = await create_app()
    bot_task = asyncio.create_task(start_bot())
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    port = int(os.environ.get("PORT", 10000))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    
    logger.info(f"üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    await bot_task

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s", e)
