import os
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiohttp import web

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")  # "@LenaMustest"
YOUR_TELEGRAM_ID = int(os.getenv("YOUR_TELEGRAM_ID"))  # 1030370280

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
awaiting_birth_date = set()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===

def get_subscription_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
            url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
        )],
        [InlineKeyboardButton(
            text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", 
            callback_data="check_subscription"
        )]
    ])

def get_back_to_channel_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª",
            url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
        )]
    ])

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start (–≤–∫–ª—é—á–∞—è deep link) ===

@dp.message(CommandStart())
async def start_handler(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–µ–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –∏–∑ –∫–∞–Ω–∞–ª–∞ (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º start=guide)
    is_from_channel = "guide" in message.text if message.text else False

    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –ò –∑–∞–ø—Ä–æ—Å –Ω–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    if user_id == YOUR_TELEGRAM_ID and not is_from_channel:
        await admin_panel(message)
        return

    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (–æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–ª–∏ –∞–¥–º–∏–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞) - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞
    try:
        chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            awaiting_birth_date.add(user_id)
            await message.answer(
                "üñêÔ∏è –ü—Ä–∏–≤–µ—Ç! –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –í—ã –∑–¥–µ—Å—å.\n\n"
    "–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ü–∏–∫–ª—ã, —Ç–æ—á–∫–∏ —Å–¥–≤–∏–≥–∞, —É–≥—Ä–æ–∑—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
    "üìå –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚Äî –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
    "<code>–¥–¥.–º–º.–≥–≥–≥–≥</code>\n\n"
    "(–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>15.08.1990</code>)",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ!",
                reply_markup=get_subscription_keyboard()
            )
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è" ===
@dp.callback_query(F.data == "check_subscription")
async def check_subscription_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    try:
        chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            awaiting_birth_date.add(user_id)
            await callback.message.edit_text(
                "üñêÔ∏è –ü—Ä–∏–≤–µ—Ç! –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –í—ã –∑–¥–µ—Å—å.\n\n"
    "–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ü–∏–∫–ª—ã, —Ç–æ—á–∫–∏ —Å–¥–≤–∏–≥–∞, —É–≥—Ä–æ–∑—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
    "üìå –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚Äî –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
    "<code>–¥–¥.–º–º.–≥–≥–≥–≥</code>\n\n"
    "(–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>15.08.1990</code>)",
                parse_mode="HTML"
            )
        else:
            await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è ===

@dp.message(F.text)
async def handle_text(message: Message):
    user_id = message.from_user.id

    # –ê–¥–º–∏–Ω ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç (–∫—Ä–æ–º–µ —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –æ–Ω —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
    if user_id == YOUR_TELEGRAM_ID and user_id not in awaiting_birth_date:
        return

    if user_id in awaiting_birth_date:
        birth_date = message.text.strip()
        if len(birth_date) >= 8 and birth_date.replace('.', '').replace(' ', '').isdigit():
            username = f"@{message.from_user.username}" if message.from_user.username else f"ID{user_id}"
            await bot.send_message(
                YOUR_TELEGRAM_ID,
                f"üÜï –ù–æ–≤—ã–π –ª–∏–¥!\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: <code>{birth_date}</code>\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤—Ä—É—á–Ω—É—é.",
                parse_mode="HTML"
            )
            awaiting_birth_date.discard(user_id)
            await message.answer(
                "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°–∫–æ—Ä–æ —è —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞.",
                reply_markup=get_back_to_channel_keyboard()
            )
        else:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–¥–¥.–º–º.–≥–≥–≥–≥</code>", parse_mode="HTML")
    else:
        # –ï—Å–ª–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        await start_handler(message)

# === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===

async def admin_panel(message: Message):
    stats_text = f"""
üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
–û–∂–∏–¥–∞—é—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã: {len(awaiting_birth_date)}
–ö–∞–Ω–∞–ª: {CHANNEL_USERNAME}
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç", callback_data="publish_post")]
    ])
    await message.answer(stats_text, reply_markup=keyboard)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–û–ü–£–ë–õ–ò–ö–û–í–ê–¢–¨ –ü–û–°–¢" ===
@dp.callback_query(F.data == "publish_post")
async def publish_post_handler(callback: CallbackQuery):
    if callback.from_user.id != YOUR_TELEGRAM_ID:
        return

    post_text = """
–ú–û–ô –¢–ï–ö–°–¢
    """

    bot_username = "ElenaMusBot"  # –í–∞—à –±–æ—Ç ElenaMusBot
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="–ü–û–õ–£–ß–ò–¢–¨ –†–ê–°–ß–ï–¢",
            url=f"https://t.me/{bot_username}?start=guide"
        )]
    ])

    try:
        await bot.send_message(CHANNEL_USERNAME, post_text, reply_markup=markup)
        await callback.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: %s", e)
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç.")

# === HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===

async def health_check(request):
    return web.Response(text="OK")

async def start_http_server():
    app = web.Application()
    app.router.add_get('/health', health_check)
    app.router.add_get('/', health_check)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å —Ç–æ–∂–µ
    
    port = int(os.environ.get("PORT", 10000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    print(f"HTTP server started on port {port}")

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await asyncio.gather(
        start_http_server(),
        dp.start_polling(bot)
    )

if __name__ == "__main__":
    asyncio.run(main())


