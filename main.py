import os
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiohttp import web

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")  # "@LenaMustest"
YOUR_TELEGRAM_ID = int(os.getenv("YOUR_TELEGRAM_ID"))  # 1030370280

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
awaiting_birth_date = set()
awaiting_question = set()
user_data = {}  # –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_subscription_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
            url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
        )],
        [InlineKeyboardButton(
            text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è",
            callback_data="check_subscription"
        )]
    ])

def get_back_to_channel_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª",
            url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
        )]
    ])

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ===
@dp.message(CommandStart())
async def start_handler(message: Message):
    user_id = message.from_user.id

    is_from_channel = "guide" in message.text if message.text else False

    if user_id == YOUR_TELEGRAM_ID and not is_from_channel:
        await admin_panel(message)
        return

    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if member.status in ("member", "administrator", "creator"):
            awaiting_birth_date.add(user_id)
            await message.answer(
                "üñêÔ∏è –ü—Ä–∏–≤–µ—Ç! –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –í—ã –∑–¥–µ—Å—å.\n\n"
                "–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ü–∏–∫–ª—ã, —Ç–æ—á–∫–∏ —Å–¥–≤–∏–≥–∞, —É–≥—Ä–æ–∑—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
                "üìå –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚Äî –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "<code>–¥–¥.–º–º.–≥–≥–≥–≥</code>\n\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>15.08.1990</code>)",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ!",
                reply_markup=get_subscription_keyboard()
            )
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è" ===
@dp.callback_query(F.data == "check_subscription")
async def check_subscription_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if member.status in ("member", "administrator", "creator"):
            awaiting_birth_date.add(user_id)
            await callback.message.edit_text(
                "üñêÔ∏è –ü—Ä–∏–≤–µ—Ç! –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –í—ã –∑–¥–µ—Å—å.\n\n"
                "–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ü–∏–∫–ª—ã, —Ç–æ—á–∫–∏ —Å–¥–≤–∏–≥–∞, —É–≥—Ä–æ–∑—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
                "üìå –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚Äî –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "<code>–¥–¥.–º–º.–≥–≥–≥–≥</code>\n\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>15.08.1990</code>)",
                parse_mode="HTML"
            )
        else:
            await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: –¥–∞—Ç–∞ ‚Üí –≤–æ–ø—Ä–æ—Å ‚Üí –æ—Ç–ø—Ä–∞–≤–∫–∞ ===
@dp.message(F.text)
async def handle_text(message: Message):
    user_id = message.from_user.id

    if user_id == YOUR_TELEGRAM_ID and user_id not in awaiting_birth_date and user_id not in awaiting_question:
        return

    # –≠—Ç–∞–ø 1: –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    if user_id in awaiting_birth_date:
        birth_date = message.text.strip()

        try:
            parts = [p.strip() for p in birth_date.split('.')]
            if len(parts) != 3:
                raise ValueError("Wrong format")

            day, month, year = int(parts[0]), int(parts[1]), int(parts[2])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            if not (1 <= day <= 31):
                raise ValueError("Day out of range")
            if not (1 <= month <= 12):
                raise ValueError("Month out of range")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–¥ –Ω–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ
            current_year = datetime.now().year
            if not (1900 <= year <= current_year):
                raise ValueError("Year out of range")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –¥–∞—Ç–∞
            valid_date = datetime(year, month, day)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–∞—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º
            if valid_date > datetime.now():
                raise ValueError("Date in future")
                
            formatted_date = f"{valid_date.day:02d}.{valid_date.month:02d}.{valid_date.year:04d}"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É
            user_data[user_id] = formatted_date
            awaiting_birth_date.discard(user_id)
            awaiting_question.add(user_id)

            await message.answer(
                "üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ë—É–¥–µ—Ç –ª–∏ —Ä–µ–±—ë–Ω–æ–∫?¬ª, ¬´–ö–æ–≥–¥–∞ –ø–µ—Ä–µ–µ–∑–¥?¬ª, ¬´–ß—Ç–æ –∂–¥—ë—Ç –≤ —Ä–∞–±–æ—Ç–µ?¬ª"
            )

        except:
            await message.answer(
                "‚ùå –û–π, –ø–æ –º–æ–µ–º—É, —Å –¥–∞—Ç–æ–π –æ—à–∏–±–æ—á–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.\n\n"
                "–§–æ—Ä–º–∞—Ç: <code>–¥–¥.–º–º.–≥–≥–≥–≥</code>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>15.08.1990</code>",
                parse_mode="HTML"
            )
        return

    # –≠—Ç–∞–ø 2: –æ–∂–∏–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
    if user_id in awaiting_question:
        question = message.text.strip()
        birth_date = user_data.pop(user_id, "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")

        username = f"@{message.from_user.username}" if message.from_user.username else f"ID{user_id}"

        try:
            await bot.send_message(
                YOUR_TELEGRAM_ID,
                f"üÜï –ù–æ–≤—ã–π –ª–∏–¥!\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: <code>{birth_date}</code>\n"
                f"–í–æ–ø—Ä–æ—Å: {question}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤—Ä—É—á–Ω—É—é.",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: %s", e)

        awaiting_question.discard(user_id)
        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –û—Ç–≤–µ—Ç –ø–æ —Ä–∞—Å—á–µ—Ç—É —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=get_back_to_channel_keyboard()
        )
        return

    # –ï—Å–ª–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
    await start_handler(message)

# === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===
async def admin_panel(message: Message):
    stats_text = (
        f"üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
        f"–û–∂–∏–¥–∞—é—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã: {len(awaiting_birth_date)}\n"
        f"–û–∂–∏–¥–∞—é—Ç –≤–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞: {len(awaiting_question)}\n"
        f"–ö–∞–Ω–∞–ª: {CHANNEL_USERNAME}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç", callback_data="publish_post")]
    ])
    await message.answer(stats_text, reply_markup=keyboard)

# === –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª ===
@dp.callback_query(F.data == "publish_post")
async def publish_post_handler(callback: CallbackQuery):
    if callback.from_user.id != YOUR_TELEGRAM_ID:
        return

    post_text = """‚ú® –Ø –æ–±—É—á–∏–ª–∞—Å—å —à–∏–∫–∞—Ä–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–µ —Ä–∞—Å—á—ë—Ç–∞ —Å—É–¥—å–±—ã –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî –∏ –æ–Ω–∞ –≥–ª—É–±–∂–µ, —á–µ–º –ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—é –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ‚ùó

–≠—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –¢–ñ–° (–¢–æ—á–∫–∞ –ñ–∏–∑–Ω–µ–Ω–Ω–æ–π –°–∏–ª—ã) - –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤–∏—Ç–∞–ª—å–Ω–æ—Å—Ç–∏.

–ö–ê–ö–ê–Ø –†–ê–ó–ù–ò–¶–ê, –°–ü–†–û–°–ò–¢–ï –í–´...

üîπ –ú–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∏ –¥—É—Ö–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞. –≠—Ç–æ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞, –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –≤ –∞—Ä–∫–∞–Ω–æ-–º–∏—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∫–ª—é—á–µ. –û–Ω–∞ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ –∑–∞–¥–∞—á–∏. –ï–µ —Å–∏–ª–∞ ‚Äî –≤ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ (–ü–û–ß–ï–ú–£? –ó–ê–ß–ï–ú?).
  ‚òëÔ∏è "–ü–æ–Ω—è—Ç—å —Å–µ–±—è, –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Ç—Ä–∞–≤–º—ã, —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–ª–∞–Ω—Ç—ã, –∏–∑–º–µ–Ω–∏—Ç—å –º—ã—à–ª–µ–Ω–∏–µ".

üîπ –°–∏—Å—Ç–µ–º–∞ –¢–ñ–° ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è. –≠—Ç–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è. –ï–µ —è–∑—ã–∫ ‚Äî –ø–ª–∞–Ω–µ—Ç—ã, –∞—Å–ø–µ–∫—Ç—ã, –¥–æ–º–∞. –û–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–æ—á–Ω—ã–º–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏. –ï–µ —Å–∏–ª–∞ ‚Äî –≤ —Ç–∞–π–º–∏–Ω–≥–µ (–ö–û–ì–î–ê?) –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—è –≤—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π.
  ‚òëÔ∏è "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –¥–µ—Ç–µ–π –∏ –±—Ä–∞–∫–æ–≤ –∏ –∫–æ–≥–¥–∞? –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –∫—Ä–∏–∑–∏—Å? –ö–æ–≥–¥–∞ —É–º—Ä–µ—Ç –±–ª–∏–∑–∫–∏–π? –ö–æ–≥–¥–∞ –ø–µ—Ä–µ–µ–∑–¥? –ö–æ–≥–¥–∞ –Ω–µ –±—Ä–∞—Ç—å –∫—Ä–µ–¥–∏—Ç? –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ä—ã–≤? "

–ê –≤–æ–æ–±—â–µ - —ç—Ç–æ –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–∏–Ω—Ç–µ–∑:

1. –ú–∞—Ç—Ä–∏—Ü–∞ –°—É–¥—å–±—ã –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å –≥–ª—É–±–∏–Ω–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –∏ –∑–∞–¥–∞—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ø–æ—á–µ–º—É —è –ø—Ä–∏—Ç—è–≥–∏–≤–∞—é –Ω–µ–Ω–∞–¥–µ–∂–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤").
2. –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è (–¢–ñ–°) –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–ª–∏ –¥–ª—è –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è –∂–µ–ª–∞–µ–º–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.

–≠—Ç–æ –æ—á–µ–Ω—å –∫—Ä—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á—ë—Ç–∞ üòç

–•–æ—á—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å!

–ü–æ–∫–∞ –ë–ï–°–ü–õ–ê–¢–ù–û. 

–í–∑–∞–º–µ–Ω –ø—Ä–æ—à—É —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–≤–æ–π telegram-–∫–∞–Ω–∞–ª.
–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å  –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ö–æ–≥–¥–∞ –ø–µ—Ä–µ–µ–∑–¥?, –ë—É–¥–µ—Ç –ª–∏ —Ä–µ–±—ë–Ω–æ–∫?, –ö–æ–≥–¥–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–æ—Å—Ç? –ß—Ç–æ –±—É–¥–µ—Ç –µ—Å–ª–∏ —è —É–π–¥—É —Å —ç—Ç–æ–π —Ä–∞–±–æ—Ç—ã?" –∏ —Ç.–¥.

–ß—Ç–æ –µ—â—ë –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ —Ä–∞—Å—á—ë—Ç–∞:
üî∏–ö–æ–≥–¥–∞ –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ–µ–∑–¥ –∏–ª–∏ –ø–æ–∫—É–ø–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
üî∏–ö–æ–≥–¥–∞ —Ñ–∏–Ω–∞–Ω—Å—ã –ø–æ–π–¥—É—Ç –≤–≤–µ—Ä—Ö (–∞ –∫–æ–≥–¥–∞ ‚Äî –Ω–∞–æ–±–æ—Ä–æ—Ç, –ª—É—á—à–µ –Ω–µ —Ä–∏—Å–∫–æ–≤–∞—Ç—å)
üî∏–ï—Å—Ç—å –ª–∏ —É–≥—Ä–æ–∑—ã –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ –≥–æ–¥—ã
üî∏–ö–æ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –∏–ª–∏ –∫—Ä–∏–∑–∏—Å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
üî∏–†–∏—Å–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π (–æ—Å–æ–±–µ–Ω–Ω–æ –≤ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ)
üî∏–ö–æ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —É—Ç—Ä–∞—Ç–∞ –±–ª–∏–∑–∫–æ–≥–æ ‚Äî –Ω–µ –¥–ª—è —Å—Ç—Ä–∞—Ö–∞, –∞ —á—Ç–æ–±—ã –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ
üî∏–ö–∞–∫ –≤–∞—à–∞ —Å—É–¥—å–±–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏, –¥–µ—Ç—å–º–∏, –º—É–∂–µ–º
–ö–æ–≥–¥–∞ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –∞ –∫–æ–≥–¥–∞ ‚Äî –∂–¥–∞—Ç—å.
–ò –ï–©–ï –ú–ù–û–ì–û–ï –î–†–£–ì–û–ï.

–ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è ‚Äî –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–∏—Å—Ç–µ–º–µ –¢–ñ–°, –≥–¥–µ —è —Ä–∞—Å–∫—Ä–æ—é –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –≤—Å–µ–≥–æ –∑–∞ 2000 —Ä—É–±–ª–µ–π.

üì©  –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ñ–ú–ò–¢–ï –ù–ê –ö–ù–û–ü–ö–£ –ù–ò–ñ–ï. 

–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ø—Ä–æ—Å–∏—Ç —É –≤–∞—Å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –≤–æ–ª–Ω—É–µ—Ç –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–Ω–µ. –î–∞–ª–µ–µ, –∫–æ–≥–¥–∞ –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤, —è  —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏.

‚ùó–ë–µ—Ä—É —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω.
–ù–µ ¬´–ø—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å¬ª, —Ç. –∫ —Ä–∞—Å—á–µ—Ç –∑–∞–Ω–∏–º–∞–µ—Ç –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏.

–ñ–ú–ò–¢–ï üëáüëáüëá"""

    bot_username = "ElenaMusBot"
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="–ü–û–õ–£–ß–ò–¢–¨ –†–ê–°–ß–ï–¢",
            url=f"https://t.me/{bot_username}?start=guide"
        )]
    ])

    try:
        await bot.send_message(CHANNEL_USERNAME, post_text, reply_markup=markup)
        await callback.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: %s", e)
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç.")

# === HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
async def health_check(request):
    return web.Response(text="OK")

async def start_http_server():
    app = web.Application()
    app.router.add_get('/health', health_check)
    app.router.add_get('/', health_check)
    port = int(os.environ.get("PORT", 10000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    print(f"HTTP server started on port {port}")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await asyncio.gather(
        start_http_server(),
        dp.start_polling(bot)
    )

if __name__ == "__main__":
    asyncio.run(main())

