import os
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiohttp import web

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")  # –ù–∞–ø—Ä–∏–º–µ—Ä: "@LenaMustest"
YOUR_TELEGRAM_ID = int(os.getenv("YOUR_TELEGRAM_ID"))

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
subscribed_users = set()
awaiting_birth_date = set()

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–û–õ–£–ß–ò–¢–¨ –†–ê–°–ß–ï–¢"
def get_main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ü–û–õ–£–ß–ò–¢–¨ –†–ê–°–ß–ï–¢", callback_data="get_calculation")]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
def get_subscription_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")],
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª"
def get_back_to_channel_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")]
    ])

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

@dp.message(Command("start"))
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ—Å–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
            await message.answer(
                "üåü –û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "<code>–¥–¥.–º–º.–≥–≥–≥–≥</code>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>15.08.1990</code>",
                parse_mode="HTML"
            )
            awaiting_birth_date.add(user_id)
            subscribed_users.add(user_id)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
            welcome_text = """
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ.

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:
            """
            await message.answer(welcome_text, reply_markup=get_subscription_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "get_calculation")
async def handle_get_calculation(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–û–õ–£–ß–ò–¢–¨ –†–ê–°–ß–ï–¢ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    try:
        chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ—Å–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
            await callback.message.edit_text(
                "üåü –û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "<code>–¥–¥.–º–º.–≥–≥–≥–≥</code>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>15.08.1990</code>",
                parse_mode="HTML"
            )
            awaiting_birth_date.add(user_id)
            subscribed_users.add(user_id)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
            await callback.message.edit_text(
                "üìã –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n\n"
                f"‚û°Ô∏è {CHANNEL_USERNAME}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=get_subscription_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "check_subscription")
async def handle_check_subscription(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'"""
    user_id = callback.from_user.id
    
    try:
        chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            # –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –ø—Ä–æ—Å–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
            await callback.message.edit_text(
                "üåü –û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "<code>–¥–¥.–º–º.–≥–≥–≥–≥</code>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>15.08.1990</code>",
                parse_mode="HTML"
            )
            awaiting_birth_date.add(user_id)
            subscribed_users.add(user_id)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è ===
@dp.message(F.content_type == "text")
async def handle_text(message: Message):
    user_id = message.from_user.id
    
    if user_id in awaiting_birth_date:
        birth_date = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        if (len(birth_date) >= 8 and 
            birth_date.replace('.', '').replace(' ', '').isdigit() and
            birth_date.count('.') == 2):
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            username = f"@{message.from_user.username}" if message.from_user.username else f"ID{user_id}"
            await bot.send_message(
                YOUR_TELEGRAM_ID,
                f"üÜï –ù–æ–≤—ã–π –ª–∏–¥!\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: <code>{birth_date}</code>\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤—Ä—É—á–Ω—É—é.",
                parse_mode="HTML"
            )
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            awaiting_birth_date.discard(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°–∫–æ—Ä–æ —è —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞.\n\n"
                "–ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—à –∫–∞–Ω–∞–ª:",
                reply_markup=get_back_to_channel_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–¥–¥.–º–º.–≥–≥–≥–≥</code>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>15.08.1990</code>",
                parse_mode="HTML"
            )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await start_handler(message)

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò –í –ö–ê–ù–ê–õ–ï ===
@dp.message(F.chat.type == "channel")
async def handle_channel_messages(message: Message):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ"""
    if message.service and any(keyword in str(message.service) for keyword in ["title", "name", "–Ω–∞–∑–≤–∞–Ω"]):
        try:
            await message.delete()
            logger.info("üóë –£–¥–∞–ª–µ–Ω–æ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# === –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ===
@dp.message(Command("admin"))
async def admin_panel(message: Message):
    """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id != YOUR_TELEGRAM_ID:
        return
    
    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ–ª—É—á–∏–≤—à–∏—Ö –≥–∞–π–¥: {len(subscribed_users)}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –≤–≤–æ–¥–∞ –¥–∞—Ç—ã: {len(awaiting_birth_date)}
‚Ä¢ –ö–∞–Ω–∞–ª: {CHANNEL_USERNAME}
    """
    
    admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç", callback_data="publish_post")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="refresh_stats")]
    ])
    
    await message.answer(stats_text, reply_markup=admin_keyboard)

@dp.callback_query(F.data == "publish_post")
async def publish_guide_offer(callback: CallbackQuery):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
    if callback.from_user.id != YOUR_TELEGRAM_ID:
        return
    
    post_text = """
üéÅ –ë–ï–°–ü–õ–ê–¢–ù–´–ô –†–ê–°–ß–ï–¢ –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã!

–£–∑–Ω–∞–π—Ç–µ:
‚Ä¢ –í–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
‚Ä¢ –ö–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏  
‚Ä¢ –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è

–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üëá
    """
    
    channel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ü–û–õ–£–ß–ò–¢–¨ –†–ê–°–ß–ï–¢", url=f"https://t.me/{(await bot.get_me()).username}?start=guide")]
    ])
    
    try:
        await bot.send_message(CHANNEL_USERNAME, post_text, reply_markup=channel_keyboard)
        await callback.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.callback_query(F.data == "refresh_stats")
async def refresh_stats(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if callback.from_user.id != YOUR_TELEGRAM_ID:
        return
    
    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ):
‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ–ª—É—á–∏–≤—à–∏—Ö –≥–∞–π–¥: {len(subscribed_users)}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –≤–≤–æ–¥–∞ –¥–∞—Ç—ã: {len(awaiting_birth_date)}
‚Ä¢ –ö–∞–Ω–∞–ª: {CHANNEL_USERNAME}
    """
    
    await callback.message.edit_text(stats_text)
    await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

# === HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
async def health_check(request):
    return web.Response(text="‚úÖ Bot is running!")

async def start_bot():
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    app = web.Application()
    app.router.add_get('/health', health_check)
    
    port = int(os.environ.get("PORT", 10000))
    
    async def main():
        await asyncio.gather(
            web._run_app(app, host='0.0.0.0', port=port),
            start_bot()
        )
    
    asyncio.run(main())
