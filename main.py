import os
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiohttp import web

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
YOUR_TELEGRAM_ID = int(os.getenv("YOUR_TELEGRAM_ID"))

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

users_waiting_for_date = set()

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def get_calculate_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü–û–õ–£–ß–ò–¢–¨ –†–ê–°–ß–ï–¢", callback_data="get_calculation")]
    ])

def get_subscription_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")],
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
    ])

def get_admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –°–û–ó–î–ê–¢–¨ –ü–û–°–¢ –í –ö–ê–ù–ê–õ–ï", callback_data="create_post")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="refresh_stats")]
    ])

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer(
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=get_calculate_keyboard()
    )

@dp.callback_query(F.data == "get_calculation")
async def handle_get_calculation(callback: CallbackQuery):
    user_id = callback.from_user.id
    try:
        chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            users_waiting_for_date.add(user_id)
            await callback.message.edit_text(
                "üìÖ **–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: **–î–î.–ú–ú.–ì–ì–ì–ì**\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.09.1985"
            )
        else:
            await callback.message.edit_text(
                "üôè **–ü–û–î–ü–ò–®–ò–¢–ï–°–¨ –ù–ê –ö–ê–ù–ê–õ, –ß–¢–û–ë–´ –ü–û–õ–£–ß–ò–¢–¨ –†–ê–°–ß–ï–¢!**\n\n"
                f"–ö–∞–Ω–∞–ª: {CHANNEL_USERNAME}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
                reply_markup=get_subscription_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏")

@dp.callback_query(F.data == "check_subscription")
async def handle_check_subscription(callback: CallbackQuery):
    user_id = callback.from_user.id
    try:
        chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            users_waiting_for_date.add(user_id)
            await callback.message.edit_text(
                "‚úÖ **–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: **–î–î.–ú–ú.–ì–ì–ì–ì**\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.09.1985"
            )
        else:
            await callback.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")

@dp.message(F.text)
async def handle_birth_date(message: Message):
    user_id = message.from_user.id
    if user_id not in users_waiting_for_date:
        await start_handler(message)
        return
    
    try:
        birth_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        
        username = message.from_user.username
        user_info = f"@{username}" if username else f"ID: {user_id}"
        first_name = message.from_user.first_name or ""
        last_name = message.from_user.last_name or ""
        full_name = f"{first_name} {last_name}".strip()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–∞–º
        await bot.send_message(
            YOUR_TELEGRAM_ID,
            f"üë§ **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –†–ê–°–ß–ï–¢!**\n\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\n"
            f"‚Ä¢ –ò–º—è: {full_name if full_name else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date.strftime('%d.%m.%Y')}\n"
            f"‚Ä¢ ID: {user_id}\n\n"
            f"üì© –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º!"
        )

        await message.answer(
            "‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!**\n\n"
            "–Ø –ø–æ–ª—É—á–∏–ª–∞ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.\n\n"
            "–û–±—ã—á–Ω–æ —è –æ—Ç–≤–µ—á–∞—é –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n\n"
            "–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ï–ª–µ–Ω–∞ üí´"
        )
        
        users_waiting_for_date.discard(user_id)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

# === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø) ===
@dp.message(Command("admin"))
async def admin_panel(message: Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å - –ì–õ–ê–í–ù–û–ï –£–°–õ–û–í–ò–ï"""
    if message.from_user.id != YOUR_TELEGRAM_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    # –≠–¢–û –ì–õ–ê–í–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –° –ö–ù–û–ü–ö–û–ô
    admin_text = """
üõ† **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø**

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–û–õ–£–ß–ò–¢–¨ –†–ê–°–ß–ï–¢"

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await message.answer(admin_text, reply_markup=get_admin_keyboard())
    logger.info("‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

@dp.callback_query(F.data == "create_post")
async def create_channel_post(callback: CallbackQuery):
    """–°–û–ó–î–ê–ù–ò–ï –ü–û–°–¢–ê –í –ö–ê–ù–ê–õ–ï - –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø"""
    if callback.from_user.id != YOUR_TELEGRAM_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    # –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
    post_text = """
üåü **–ë–ï–°–ü–õ–ê–¢–ù–´–ô –†–ê–°–ß–ï–¢ –ü–û –ú–ê–¢–†–ò–¶–ï –°–£–î–¨–ë–´!** üéÅ

üìä –£–∑–Ω–∞–π—Ç–µ –æ —Å–≤–æ–∏—Ö:
‚Ä¢ –°–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö –∏ —Ç–∞–ª–∞–Ω—Ç–∞—Ö
‚Ä¢ –ö–∞—Ä–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö  
‚Ä¢ –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
‚Ä¢ –ó–æ–Ω–∞—Ö —Ä–æ—Å—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö

‚ú® –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ë–ï–°–ü–õ–ê–¢–ù–û!

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá
    """
    
    try:
        # –°–û–ó–î–ê–ï–ú –ü–û–°–¢ –í –ö–ê–ù–ê–õ–ï –° –ö–ù–û–ü–ö–û–ô
        await bot.send_message(
            CHANNEL_USERNAME, 
            post_text, 
            reply_markup=get_calculate_keyboard()
        )
        await callback.answer("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
        logger.info(f"‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_USERNAME}")
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}"
        await callback.answer(error_msg)
        logger.error(error_msg)

@dp.callback_query(F.data == "refresh_stats")
async def refresh_stats(callback: CallbackQuery):
    if callback.from_user.id != YOUR_TELEGRAM_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞**

‚Ä¢ –ö–∞–Ω–∞–ª: {CHANNEL_USERNAME}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–∂–∏–¥–∞—é—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã: {len(users_waiting_for_date)}
‚Ä¢ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}
    """
    
    await callback.message.edit_text(stats_text, reply_markup=get_admin_keyboard())
    await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

# === –ó–ê–ü–£–°–ö ===
async def start_bot_with_retry():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ –í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
        
        await asyncio.sleep(2)
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await asyncio.sleep(10)
        await start_bot_with_retry()

async def simple_web_server():
    """–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render"""
    app = web.Application()
    
    async def health_check(request):
        return web.Response(text='‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!')
    
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    port = int(os.environ.get('PORT', 10000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    
    logger.info(f"üåê HTTP-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")

async def main():
    logger.info("üéØ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    asyncio.create_task(simple_web_server())
    await start_bot_with_retry()

if __name__ == "__main__":
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
    asyncio.run(main())
