import os
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiohttp import web

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
YOUR_TELEGRAM_ID = int(os.getenv("YOUR_TELEGRAM_ID"))

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

users_waiting_for_date = set()

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def get_calculate_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü–û–õ–£–ß–ò–¢–¨ –†–ê–°–ß–ï–¢", callback_data="get_calculation")]
    ])

def get_subscription_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")],
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
    ])

def get_admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ", callback_data="create_post")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="refresh_stats")]
    ])

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=get_calculate_keyboard())

@dp.callback_query(F.data == "get_calculation")
async def handle_get_calculation(callback: CallbackQuery):
    user_id = callback.from_user.id
    try:
        chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            users_waiting_for_date.add(user_id)
            await callback.message.edit_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
        else:
            await callback.message.edit_text("üôè –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=get_subscription_keyboard())
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.callback_query(F.data == "check_subscription")
async def handle_check_subscription(callback: CallbackQuery):
    user_id = callback.from_user.id
    try:
        chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            users_waiting_for_date.add(user_id)
            await callback.message.edit_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
        else:
            await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!")
    except:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.message(F.text)
async def handle_birth_date(message: Message):
    user_id = message.from_user.id
    if user_id not in users_waiting_for_date:
        await start_handler(message)
        return
    
    try:
        birth_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        username = f"@{message.from_user.username}" if message.from_user.username else f"ID{user_id}"
        
        await bot.send_message(
            YOUR_TELEGRAM_ID, 
            f"üë§ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n–î–∞—Ç–∞: {birth_date.strftime('%d.%m.%Y')}"
        )
        
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ.")
        users_waiting_for_date.discard(user_id)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

# === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ===
@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id != YOUR_TELEGRAM_ID:
        return
    
    stats_text = f"üìä –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n–ö–∞–Ω–∞–ª: {CHANNEL_USERNAME}"
    await message.answer(stats_text, reply_markup=get_admin_keyboard())

@dp.callback_query(F.data == "create_post")
async def create_channel_post(callback: CallbackQuery):
    if callback.from_user.id != YOUR_TELEGRAM_ID:
        return
    
    post_text = "üåü –ë–ï–°–ü–õ–ê–¢–ù–´–ô –†–ê–°–ß–ï–¢ –ü–û –ú–ê–¢–†–ò–¶–ï –°–£–î–¨–ë–´! üéÅ"
    
    try:
        await bot.send_message(CHANNEL_USERNAME, post_text, reply_markup=get_calculate_keyboard())
        await callback.answer("‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö ===
async def start_bot_with_retry():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ–º –¥—Ä—É–≥–∏—Ö —Å–µ—Å—Å–∏–π"""
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—Ä—É–≥–∏–µ —Å–µ—Å—Å–∏–∏
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ –í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω, –¥—Ä—É–≥–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω—ã")
        
        # –ñ–¥–µ–º —Å–µ–∫—É–Ω–¥—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        await asyncio.sleep(2)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        await start_bot_with_retry()

async def simple_web_server():
    """–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render"""
    app = web.Application()
    
    async def health_check(request):
        return web.Response(text='Bot is alive!')
    
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    port = int(os.environ.get('PORT', 10000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    
    logger.info(f"üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(simple_web_server())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await start_bot_with_retry()

if __name__ == "__main__":
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    asyncio.run(main())
