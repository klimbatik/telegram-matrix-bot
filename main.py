import os
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiohttp import web

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
YOUR_TELEGRAM_ID = int(os.getenv("YOUR_TELEGRAM_ID"))

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

users_waiting_for_date = set()

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
def get_channel_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü–û–õ–£–ß–ò–¢–¨ –†–ê–°–ß–ï–¢", url=f"https://t.me/{(await bot.get_me()).username}?start=channel")]
    ])

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–æ—Ç–µ
def get_subscription_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")],
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
    ])

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
def get_admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç", callback_data="publish_post")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="refresh_stats")]
    ])

# === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

@dp.message(Command("start"))
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –∫–∞–Ω–∞–ª–∞
    if message.text.endswith('channel'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª –∏–∑ –∫–∞–Ω–∞–ª–∞ - —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        user_id = message.from_user.id
        
        try:
            chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
            if chat_member.status in ["member", "administrator", "creator"]:
                # –ü–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ—Å–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
                users_waiting_for_date.add(user_id)
                await message.answer(
                    "üìÖ **–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì**\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.09.1985"
                )
            else:
                # –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
                await message.answer(
                    "üôè **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª**\n\n"
                    f"–ö–∞–Ω–∞–ª: {CHANNEL_USERNAME}",
                    reply_markup=get_subscription_keyboard()
                )
        except Exception as e:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
    
    else:
        # –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç - –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await message.answer(
            "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –ü–û–õ–£–ß–ò–¢–¨ –†–ê–°–ß–ï–¢", callback_data="get_calculation")]
            ])
        )

@dp.callback_query(F.data == "get_calculation")
async def handle_get_calculation(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–û–õ–£–ß–ò–¢–¨ –†–ê–°–ß–ï–¢ –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞"""
    user_id = callback.from_user.id
    
    try:
        chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            users_waiting_for_date.add(user_id)
            await callback.message.edit_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
        else:
            await callback.message.edit_text(
                "üôè –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞:",
                reply_markup=get_subscription_keyboard()
            )
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")

@dp.callback_query(F.data == "check_subscription")
async def handle_check_subscription(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'"""
    user_id = callback.from_user.id
    
    try:
        chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            users_waiting_for_date.add(user_id)
            await callback.message.edit_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
        else:
            await callback.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!")
    except:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")

@dp.message(F.text)
async def handle_birth_date(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    user_id = message.from_user.id
    
    if user_id not in users_waiting_for_date:
        await start_handler(message)
        return
    
    try:
        birth_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        username = f"@{message.from_user.username}" if message.from_user.username else f"ID{user_id}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–∞–º
        await bot.send_message(
            YOUR_TELEGRAM_ID, 
            f"üë§ **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!**\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date.strftime('%d.%m.%Y')}\n"
            f"ID: {user_id}"
        )
        
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ.")
        users_waiting_for_date.discard(user_id)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

# === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ===

@dp.message(Command("admin"))
async def admin_panel(message: Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
    if message.from_user.id != YOUR_TELEGRAM_ID:
        return
    
    stats_text = f"üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–û–∂–∏–¥–∞—é—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã: {len(users_waiting_for_date)}"
    await message.answer(stats_text, reply_markup=get_admin_keyboard())

@dp.callback_query(F.data == "publish_post")
async def publish_post(callback: CallbackQuery):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
    if callback.from_user.id != YOUR_TELEGRAM_ID:
        return
    
    post_text = """
üåü **–ë–ï–°–ü–õ–ê–¢–ù–´–ô –†–ê–°–ß–ï–¢ –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã!**

–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–µ–π—á–∞—Å! üëá
    """
    
    try:
        await bot.send_message(CHANNEL_USERNAME, post_text, reply_markup=get_channel_keyboard())
        await callback.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.callback_query(F.data == "refresh_stats")
async def refresh_stats(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if callback.from_user.id != YOUR_TELEGRAM_ID:
        return
    
    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n–û–∂–∏–¥–∞—é—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã: {len(users_waiting_for_date)}"
    await callback.message.edit_text(stats_text, reply_markup=get_admin_keyboard())
    await callback.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ")

# === –ó–ê–ü–£–°–ö ===
async def start_bot():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

async def web_server():
    app = web.Application()
    app.router.add_get('/', lambda r: web.Response(text='OK'))
    app.router.add_get('/health', lambda r: web.Response(text='OK'))
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get('PORT', 10000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()

async def main():
    await asyncio.gather(web_server(), start_bot())

if __name__ == "__main__":
    asyncio.run(main())
