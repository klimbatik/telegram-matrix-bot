import os
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiohttp import web

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")  # –ù–∞–ø—Ä–∏–º–µ—Ä: "@LenaMustest"
YOUR_TELEGRAM_ID = int(os.getenv("YOUR_TELEGRAM_ID"))

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
subscribed_users = set()

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–û–õ–£–ß–ò–¢–¨ –†–ê–°–ß–ï–¢"
def get_main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ü–û–õ–£–ß–ò–¢–¨ –†–ê–°–ß–ï–¢", callback_data="get_guide")]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
def get_subscription_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")],
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
    ])

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

@dp.message(Command("start"))
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π –≥–∞–π–¥ –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º:
    """
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

@dp.callback_query(F.data == "get_guide")
async def handle_get_guide(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–û–õ–£–ß–ò–¢–¨ –†–ê–°–ß–ï–¢"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    try:
        chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω - –≤—ã–¥–∞—ë–º –≥–∞–π–¥
            await send_guide(callback)
            subscribed_users.add(user_id)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
            await callback.message.edit_text(
                "üìã –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n\n"
                f"‚û°Ô∏è {CHANNEL_USERNAME}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=get_subscription_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "check_subscription")
async def handle_check_subscription(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'"""
    user_id = callback.from_user.id
    
    try:
        chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            # –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –≤—ã–¥–∞—ë–º –≥–∞–π–¥
            await send_guide(callback)
            subscribed_users.add(user_id)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def send_guide(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    guide_text = """
üìö **–í–∞—à –≥–∞–π–¥ –≥–æ—Ç–æ–≤!**

–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: [—Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –≥–∞–π–¥]

–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç
‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã

–î–ª—è –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞ –Ω–∞–∂–º–∏—Ç–µ /start
    """
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await callback.message.delete()
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∞–π–¥
    await callback.message.answer(guide_text)
    await callback.answer("‚úÖ –ì–∞–π–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò –í –ö–ê–ù–ê–õ–ï ===

@dp.message(F.chat.type == "channel")
async def handle_channel_messages(message: Message):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    if message.service and any(keyword in str(message.service) for keyword in ["title", "name", "–Ω–∞–∑–≤–∞–Ω"]):
        try:
            await message.delete()
            logger.info("üóë –£–¥–∞–ª–µ–Ω–æ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# === –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ===

@dp.message(Command("admin"))
async def admin_panel(message: Message):
    """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id != YOUR_TELEGRAM_ID:
        return
    
    stats_text = f"""
  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ–ª—É—á–∏–≤—à–∏—Ö –≥–∞–π–¥: {len(subscribed_users)}
‚Ä¢ –ö–∞–Ω–∞–ª: {CHANNEL_USERNAME}
    """
    
    admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç", callback_data="publish_post")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="refresh_stats")]
    ])
    
    await message.answer(stats_text, reply_markup=admin_keyboard)

@dp.callback_query(F.data == "publish_post")
async def publish_guide_offer(callback: CallbackQuery):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
    if callback.from_user.id != YOUR_TELEGRAM_ID:
        return
    
    post_text = """
–ú–û–ô –¢–ï–ö–°–¢
    """
    
    channel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–û–õ–£–ß–ò–¢–¨ –†–ê–°–ß–ï–¢", url=f"https://t.me/{(await bot.get_me()).username}?start=guide")]
    ])
    
    try:
        await bot.send_message(CHANNEL_USERNAME, post_text, reply_markup=channel_keyboard)
        await callback.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
async def health_check(request):
    return web.Response(text="‚úÖ Bot is running!")

async def start_bot():
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    app = web.Application()
    app.router.add_get('/health', health_check)
    
    port = int(os.environ.get("PORT", 10000))
    
    async def main():
        await asyncio.gather(
            web._run_app(app, host='0.0.0.0', port=port),
            start_bot()
        )
    
    asyncio.run(main())

